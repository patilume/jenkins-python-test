pipeline{
	agent any
	environment {
      PATH="/var/lib/jenkins/miniconda3/bin:$PATH"
    }
	stages {
		stage ("Code pull"){
            steps{
				echo "cheking out source code...."
                checkout scm
            }
		}
		
		stage('Build environment') {
            steps {
                echo "Building virtual enviornment..."
                sh  ''' conda create --yes -n ${BUILD_TAG} python
                        source activate ${BUILD_TAG}
                        pip install -r requirements/dev.txt
                    '''
				echo "FINISHED - Building virtual enviornment..."
            }
        }
		
		stage('Static code metrics') {
            steps {
                echo "Raw metrics"
                sh  ''' source activate ${BUILD_TAG}
                        radon raw --json irisvmpy/ > raw_report.json
                        radon cc --json irisvmpy/ > cc_report.json
                        radon mi --json irisvmpy/ > mi_report.json
                        echo 'TODO: add conversion and HTML publisher step'
                    '''
            }
        }
		
		stage('Static code metrics code coverage') {
            steps {
                echo "Code Coverage"
                sh  ''' source activate ${BUILD_TAG}
                        coverage run irisvmpy/iris.py 1 1 2 3
                        python -m coverage xml -o ./reports/coverage.xml
                    '''
            }
            post{
                always{
                    step([$class: 'CoberturaPublisher',
                                   autoUpdateHealth: false,
                                   autoUpdateStability: false,
                                   coberturaReportFile: 'reports/coverage.xml',
                                   failNoReports: false,
                                   failUnhealthy: false,
                                   failUnstable: false,
                                   maxNumberOfBuilds: 10,
                                   onlyStable: false,
                                   sourceEncoding: 'ASCII',
                                   zoomCoverageChart: false])
                }
            }
        }
		
		stage('Static code metrics - style check') {
            steps {
                echo "PEP8 style check"
                sh  ''' source activate ${BUILD_TAG}
                        pylint --disable=C irisvmpy || true
                    '''
            }
        }
		
		stage('Static code metrics - style check pylint') {
            steps {
				echo "Style check"
                sh  ''' source activate ${BUILD_TAG}
                        pylint irisvmpy || true
                    '''
			}
		}
		
		stage('Unit tests') {
            steps {
                sh  ''' source activate ${BUILD_TAG}
                        python -m pytest --verbose --junit-xml reports/unit_tests.xml
                    '''
            }
            post {
                always {
                    // Archive unit tests for the future
                    junit allowEmptyResults: true, testResults: 'reports/unit_tests.xml'
                }
            }
        }
		
		stage('integration tests') {
            steps {
                sh  ''' source activate ${BUILD_TAG}
                        python -m behave2cucumber ./reports/integration.json
                    '''
            }
            
        }
	}
}
	
